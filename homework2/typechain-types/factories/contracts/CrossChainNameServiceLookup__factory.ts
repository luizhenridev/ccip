/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CrossChainNameServiceLookup,
  CrossChainNameServiceLookupInterface,
} from "../../contracts/CrossChainNameServiceLookup";

const _abi = [
  {
    inputs: [],
    name: "AlreadyTaken",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "lookup",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "crossChainNameService",
        type: "address",
      },
    ],
    name: "setCrossChainNameServiceAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801562000010575f80fd5b5033805f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000085576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007c906200029e565b60405180910390fd5b815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200010a5762000109816200011360201b60201c565b5b5050506200032c565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000184576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017b906200030c565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b5f82825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000005f82015250565b5f6200028660188362000240565b9150620002938262000250565b602082019050919050565b5f6020820190508181035f830152620002b78162000278565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c660000000000000000005f82015250565b5f620002f460178362000240565b91506200030182620002be565b602082019050919050565b5f6020820190508181035f8301526200032581620002e6565b9050919050565b610b49806200033a5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80631e59c529146100645780636f2aba191461008057806379ba50971461009c5780638da5cb5b146100a6578063f2fde38b146100c4578063f67187ac146100e0575b5f80fd5b61007e60048036038101906100799190610855565b610110565b005b61009a600480360381019061009591906108af565b610298565b005b6100a46102e3565b005b6100ae610472565b6040516100bb91906108e9565b60405180910390f35b6100de60048036038101906100d991906108af565b610499565b005b6100fa60048036038101906100f59190610902565b6104ad565b60405161010791906108e9565b60405180910390f35b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610196576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff166002836040516101bd91906109b5565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610238576040517f303973dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060028360405161024991906109b5565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6102a06104f5565b8060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036990610a25565b60405180910390fd5b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104a16104f5565b6104aa81610584565b50565b6002818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610a8d565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990610af5565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61070d826106c7565b810181811067ffffffffffffffff8211171561072c5761072b6106d7565b5b80604052505050565b5f61073e6106ae565b905061074a8282610704565b919050565b5f67ffffffffffffffff821115610769576107686106d7565b5b610772826106c7565b9050602081019050919050565b828183375f83830152505050565b5f61079f61079a8461074f565b610735565b9050828152602081018484840111156107bb576107ba6106c3565b5b6107c684828561077f565b509392505050565b5f82601f8301126107e2576107e16106bf565b5b81356107f284826020860161078d565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610824826107fb565b9050919050565b6108348161081a565b811461083e575f80fd5b50565b5f8135905061084f8161082b565b92915050565b5f806040838503121561086b5761086a6106b7565b5b5f83013567ffffffffffffffff811115610888576108876106bb565b5b610894858286016107ce565b92505060206108a585828601610841565b9150509250929050565b5f602082840312156108c4576108c36106b7565b5b5f6108d184828501610841565b91505092915050565b6108e38161081a565b82525050565b5f6020820190506108fc5f8301846108da565b92915050565b5f60208284031215610917576109166106b7565b5b5f82013567ffffffffffffffff811115610934576109336106bb565b5b610940848285016107ce565b91505092915050565b5f81519050919050565b5f81905092915050565b5f5b8381101561097a57808201518184015260208101905061095f565b5f8484015250505050565b5f61098f82610949565b6109998185610953565b93506109a981856020860161095d565b80840191505092915050565b5f6109c08284610985565b915081905092915050565b5f82825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e6572000000000000000000005f82015250565b5f610a0f6016836109cb565b9150610a1a826109db565b602082019050919050565b5f6020820190508181035f830152610a3c81610a03565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000005f82015250565b5f610a776016836109cb565b9150610a8282610a43565b602082019050919050565b5f6020820190508181035f830152610aa481610a6b565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c660000000000000000005f82015250565b5f610adf6017836109cb565b9150610aea82610aab565b602082019050919050565b5f6020820190508181035f830152610b0c81610ad3565b905091905056fea2646970667358221220ca5b1ec55afb3cb8f34bc3c654e6fe792d2fc92071349264fc6749b1895cfdfe64736f6c63430008140033";

type CrossChainNameServiceLookupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrossChainNameServiceLookupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CrossChainNameServiceLookup__factory extends ContractFactory {
  constructor(...args: CrossChainNameServiceLookupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CrossChainNameServiceLookup> {
    return super.deploy(
      overrides || {}
    ) as Promise<CrossChainNameServiceLookup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CrossChainNameServiceLookup {
    return super.attach(address) as CrossChainNameServiceLookup;
  }
  override connect(signer: Signer): CrossChainNameServiceLookup__factory {
    return super.connect(signer) as CrossChainNameServiceLookup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossChainNameServiceLookupInterface {
    return new utils.Interface(_abi) as CrossChainNameServiceLookupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossChainNameServiceLookup {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CrossChainNameServiceLookup;
  }
}
